// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER IDENTIFICATION

model User {
  id            String       @id @default(uuid())
  name          String?
  role          Role        @default(USER)
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]

  learningSet   LearnerSet[]
  wordProgress  UserWordProgress[]
  createdSets   Set[]
}

model Account {
  id                       Int      @id @default(autoincrement())
  userId                   String
  type                     String
  provider                 String   @default("github")
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "userId")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// DICTIONARY

model Word {
  id            Int       @id @default(autoincrement())
  partOfSpeech  PartOfSpeech
  infinitive    String   @unique
  url           String
  present       PresentConjugation?
  preterite     PreteriteConjugation?
  imperfect     ImperfectConjugation?
  participle    ParticipleConjudation?
  set           WordSet[]
  progress      UserWordProgress[]
}

model PresentConjugation {
  id            Int      @id @default(autoincrement())
  word_id       Int      @unique
  word Word @relation(fields: [word_id], references: [id], onDelete: Cascade)
  yo           String
  tu           String
  elEllaUsted  String
  nosotros     String
  vosotros     String
  ellosEllasUstedes String
}

model PreteriteConjugation {
  id           Int      @id @default(autoincrement())
  wordId       Int      @unique
  word Word             @relation(fields: [wordId], references: [id], onDelete: Cascade)
  yo           String
  tu           String
  elEllaUsted  String
  nosotros     String
  vosotros     String
  ellosEllasUstedes String
}

model ImperfectConjugation {
  id           Int      @id @default(autoincrement())
  wordId       Int      @unique
  word Word             @relation(fields: [wordId], references: [id], onDelete: Cascade)
  yo           String
  tu           String
  elEllaUsted  String
  nosotros     String
  vosotros     String
  ellosEllasUstedes String
}

model ParticipleConjudation {
  id            Int      @id @default(autoincrement())
  word_id       Int      @unique
  word Word              @relation(fields: [word_id], references: [id], onDelete: Cascade)
  present       String
  past          String
}

model Set {
  id              Int             @id @default(autoincrement())
  title           String
  authorId        String          
  author          User            @relation(fields: [authorId], references: [id])
  visibility      VisibilityLevel
  words           WordSet[]
  learners        LearnerSet[]            
}

/*** 
  RELATIONSHIP TABLE
  LearnerSet          : many-to-many relationship between User and Set
  WordSet             : many-to-many relationship between Word and Set

  UserWordProgress    : 
  This model tracks the progress for each word independently of the sets it belongs.
  - quality : 
    5 - perfect response
    4 - correct response after a hesitation
    3 - correct response recalled with serious difficulty
    2 - incorrect response; where the correct one seemed easy to recall
    1 - incorrect response; the correct one remembered
    0 - complete blackout.
*/

model LearnerSet {
  learnerId       String
  learner         User     @relation(fields: [learnerId], references: [id], onDelete: Cascade)
  setId           Int 
  set             Set      @relation(fields: [setId], references: [id], onDelete: Cascade)

  @@id([learnerId, setId])
}

model WordSet {
  id           Int    @id @default(autoincrement())
  setId        Int 
  Set          Set    @relation(fields: [setId], references: [id], onDelete: Cascade)
  wordId       Int
  word         Word   @relation(fields: [wordId], references: [id], onDelete: Cascade)

  assignedAt   DateTime @default(now())

  @@unique([setId, wordId])
}

/*** : 
  This model tracks the progress for each word independently of the sets it belongs.

  - Quality
    indicate how easily the information was remembered today
    5 - perfect response
    4 - correct response after a hesitation
    3 - correct response recalled with serious difficulty
    2 - incorrect response; where the correct one seemed easy to recall
    1 - incorrect response; the correct one remembered
    0 - complete blackout

  - Repetition
    The number of times the information has been reviewed prior to this review. repetitions should equal zero for the first review.

  - easeFactor
    A floating point number (â‰¥ 1.3) generated by the last iteration of the SM-2 algorithm
    Determine the number of days to wait before reviewing again.

  - previousInterval
    Generated by the last iteration of the SM-2 algorithm. Indicates the number of days to wait between reviews.
*/
model UserWordProgress {
  id           Int      @id @default(autoincrement())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  wordId       Int
  word         Word     @relation(fields: [wordId], references: [id], onDelete: Cascade)

  quality          Quality
  repetition       Int      @default(0)
  easeFactor       Float    @default(2.5)
  previousInterval Int      @default(0)
  lastReviewed     DateTime @default(now())

  @@unique([userId, wordId])
}


// ENUMS

enum Role {
  USER
  ADMIN
}

enum PartOfSpeech {
  NOUN
  VERB
  ADJECTIVE
}

enum VisibilityLevel {
  PUBLIC
  PRIVATE
}

/*** 
  EASY                : 5
  GOOD                : 4
  CORRECT_HESITATE    : 3
  INCORRECT_RECALL    : 1
  INCORRECT           : 1
  BLACKOUT            : 0
*/

enum Quality {
  EASY
  GOOD
  CORRECT_HESITATE
  INCORRECT_RECALL
  INCORRECT
  BLACKOUT
}